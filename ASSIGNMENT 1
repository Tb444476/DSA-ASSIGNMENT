#include<bits/stdc++.h>
using namespace std;
struct employee
{
	char name[25];
	int id=-1;
};
int nextempty(employee *e, int n)
{
    int index;
    index=0;                                            //traversing from starting index
	while(index<n){
	   if(e[index].id==-1){                             //if found empty then return the index
	       return index;
	   }
	   index=index+1;
	}
}
void hashsearch(employee *e, int n, int key)
{
    if(e[key%n].id==key){                              //first checking the base case
        cout<<"Found."<<endl;
        cout<<"Employee name is:"<<e[key%n].name<<endl;
        cout<<"Employee ID is:"<<e[key%n].id<<endl;
        return;
    }
    else{
        int i;
        i=0;
        while(i<n){
            if(e[i].id==key){
            	cout<<"Found."<<endl;
            	cout<<"Employee name is:"<<e[i].name<<endl;
            	cout<<"Employee ID is:"<<e[i].id<<endl;
            	return;
            }
        }
    }
    cout<<"Not Found."<<endl;
    return;
}
int main()
{
	int i, n, key;
	cout<<"Enter the number of employees:";
	cin>>n;
	employee e[n];
	employee temp;
	cout<<"Enter the data of the employees:";
	cout<<endl;
	for(i=0; i<n; i++)
	{
		cout<<"Enter the name of the employee:";
		cin>>temp.name;
		cout<<"Enter employee ID:";
		cin>>temp.id;
		if(e[(temp.id)%n].id==-1){                   //to check if the space is empty
			strcpy(e[(temp.id)%n].name,temp.name);   //if empty then store
			e[(temp.id)%n].id=temp.id;
		}
		else{
		    strcpy(e[nextempty(e,n)].name,temp.name); //else call the collision function and find empty space
			e[nextempty(e,n)].id=temp.id;
		}
	}
	cout<<"Enter the ID to search:";
	cin>>key;
	hashsearch(e,n,key);                              //calling the hash function and finding if the key is found
	return 0;
}
