#include<bits/stdc++.h>
using namespace std;
class Stack
{
    public:
    char s[20];
    int size=20;
    int top=-1;
    void push(char x)
    {
        if(top==size-1){
            return;
        }
        top=top+1;
        s[top]=x;
    }
    int pop()
    {
        char x;
        if(top==-1){
            return -1;
        }
        x=s[top];
        top=top-1;
        return x;
    }
    int gettop()
    {
        if(top!=-1){
            return s[top];
        }
    }
    bool empty()
    {
        if(top==-1){
            return 1;
        }
        else{
            return 0;
        }
    }
};
int precedence(char);
bool is_operand(char);
void intopo(char *,char *);
int main()
{
    int n;
    cout<<"Enter the length of the string:";
    cin>>n;
    char infix[n+1];
    char postfix[n+1];
    cout<<"Enter the infix expression:";
    cin>>infix;
    infix[n]='\0';
    intopo(infix,postfix);
    cout<<"Postfix expression is:"<<postfix;
    return 0;
}
int precedence(char x)
{
    if(x=='+' || x=='-'){
        return 1;
    }
    else if(x=='*' || x=='/'){
        return 2;
    }
    else if(x=='^'){
        return 3;
    }
}
bool is_operand(char x)
{
    if(x!='+' && x!='-' && x!='*' && x!='/' && x!='^'){
        return 1;
    }
    else{
        return 0;
    }
}
void intopo(char *infix, char *postfix)
{
    int i=0, j=0;
    Stack st;
    while(infix[i]!='\0'){
        if(is_operand(infix[i])==1){
            postfix[j]=infix[i];
            i=i+1;
            j=j+1;
        }
        else{
            if(st.empty()==0 && precedence(st.gettop())>=precedence(infix[i])){
                postfix[j]=st.pop();
                j=j+1;
            }
            else{
                st.push(infix[i]);
                i=i+1;
            }
        }
    }
    while(st.empty()!=1){
        postfix[j]=st.pop();
        j=j+1;
    }
}
