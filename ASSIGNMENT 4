#include <iostream>
using namespace std;
struct node
{
    int data;
    node *next=NULL;
};
class Stack
{
    private:
    node *top;
    public:
    Stack()
    {
        top=NULL;
    }
    void push(int x)
    {
        node *temp=new node;
        temp->data=x;
        if(top!=NULL){
            temp->next=top;
        }
        top=temp;
    }
    int pop()
    {
        if(top==NULL){
            return -1;
        }
        int x;
        x=top->data;
        top=top->next;
        return x;
    }
    bool is_empty()
    {
        if(top==NULL){
            return 1;
        }
        else{
            return 0;
        }
    }
    void display()
    {
        node *temp=top;
        while(temp){
            cout<<temp->data<<"->";
            temp=temp->next;
        }
        cout<<"NULL"<<endl;
    }
};
class Queue
{
    private:
    node *front, *rear;
    public:
    Queue()
    {
        front=NULL;
        rear=NULL;
    }
    void enqueue(int x)
    {
        if(front==NULL && rear==NULL){
            node *temp=new node;
            temp->data=x;
            front=temp;
            rear=temp;
            return;
        }
        node *temp=new node;
        rear->next=temp;
        temp->data=x;
        rear=rear->next;
    }
    int dequeue()
    {
        if(front==NULL && rear==NULL){
            return -1;
        }
        int x=front->data;
        front=front->next;
        if(front==rear){
            rear=rear->next;
        }
        return x;
    }
    bool is_empty()
    {
        if(front=NULL){
            return 1;
        }
        else{
            return 0;
        }
    }
    void display()
    {
        node *temp=front;
        while(temp){
            cout<<temp->data<<"->";
            temp=temp->next;
        }
        cout<<"NULL"<<endl;
    }
};
int main()
{
    Stack st;
    Queue q;
    st.push(2);
    st.push(3);
    st.push(4);
    cout<<"Stack:";
    st.display();
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    cout<<"Queue:";
    q.display();
    return 0;
}
